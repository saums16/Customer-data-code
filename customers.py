# -*- coding: utf-8 -*-
"""Customers_.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NFNQ81wvupk7jFMDzk2mPnEa7GdjfCcf
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from sklearn.manifold import TSNE
import plotly.graph_objs as go
import plotly .offline as offline
import plotly.figure_factory as ff
import umap

# Importing dataset and examining it
dataset = pd.read_csv(r'/content/drive/My Drive/customers.csv')
print(dataset.head())
print(dataset.shape)
print(dataset.info())
print(dataset.describe())

# Plotting Correlation Heatmap
corrs = dataset.corr()
figure = ff.create_annotated_heatmap(
    z=corrs.values,
    x=list(corrs.columns),
    y=list(corrs.index),    
    annotation_text=corrs.round(2).values,
    showscale=True, colorscale = 'hot')
x=list(corrs.columns)
   
print(x)
offline.plot(figure,filename='corrheatmap.html')

# Dropping columns with high correlation + causation
dataset = dataset.drop(['TotalCharges','MonthlyCharges', 'tenure'], axis = 1)
print(dataset.info())

# Converting Categorical features into Numerical features
categorical_features = ['gender', 'Partner', 'Dependents', 'PhoneService', 'MultipleLines', 'InternetService', 'OnlineSecurity'
                        ,'OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies','Contract','PaperlessBilling'
                       ,'PaymentMethod']
final_data = pd.get_dummies(dataset, columns = categorical_features)
print(final_data.info())
print(final_data.head(2))

# Dividing data into subsets
#Personal Data of the customer
subset1 = final_data[['SeniorCitizen','gender_Female','gender_Male','Partner_No','Partner_Yes','Dependents_No','Dependents_Yes']]

#Customer's device subscription  details
subset2 = final_data[['PhoneService_No','PhoneService_Yes','MultipleLines_No','MultipleLines_Yes','MultipleLines_No phone service','DeviceProtection_No','DeviceProtection_Yes','TechSupport_No','TechSupport_Yes'
                      ,'Contract_Month-to-month','Contract_One year','Contract_Two year']]

#Customer's billing details
subset3 = final_data[['PaperlessBilling_No','PaperlessBilling_Yes','PaymentMethod_Bank transfer (automatic)','PaymentMethod_Credit card (automatic)',
                     'PaymentMethod_Electronic check','PaymentMethod_Mailed check']]

#Customer's internet service details
subset4 = final_data[['InternetService_DSL','InternetService_Fiber optic','InternetService_No','OnlineSecurity_No','OnlineSecurity_No internet service'
                     ,'OnlineSecurity_Yes','OnlineBackup_Yes','StreamingTV_No','StreamingTV_No internet service','StreamingTV_Yes','StreamingMovies_No','StreamingMovies_No internet service',
                     'StreamingMovies_Yes']]


# Normalizing numerical features 
feature_scaler = StandardScaler()
X1 = feature_scaler.fit_transform(subset1)
X2 = feature_scaler.fit_transform(subset2)
X3 = feature_scaler.fit_transform(subset3)
X4 = feature_scaler.fit_transform(subset4)

# Analysis on subset1 - Personal Data
# Finding the number of clusters (K) - Elbow Plot Method
inertia = []
for i in range(1,11):
    kmeans = KMeans(n_clusters = i, random_state = 100)
    kmeans.fit(X1)
    inertia.append(kmeans.inertia_)

plt.plot(range(1, 11), inertia)
plt.title('The Elbow Plot')
plt.xlabel('Number of clusters')
plt.ylabel('Inertia')
plt.show()
# Running KMeans to generate labels
kmeans = KMeans(n_clusters = 3)
kmeans.fit(X1)
# Implementing t-SNE to visualize dataset
tsne = TSNE(n_components = 3, perplexity =100,n_iter=5000)
x_tsne = tsne.fit_transform(X1)
['SeniorCitizen','gender','Partner','Dependents']
SeniorCitizen = list(dataset['SeniorCitizen'])
gender = list(dataset['gender'])
Partner = list(dataset['Partner'])
Dependents = list(dataset['Dependents'])

data = [go.Scatter(x=x_tsne[:,0], y=x_tsne[:,1], mode='markers',
                    marker = dict(color=kmeans.labels_, colorscale='Rainbow', opacity=0.5),
                                text=[f'SeniorCitizen: {a}; gender: {b}; Partner:{c}, Dependents:{d}' for a,b,c,d in list(zip(SeniorCitizen,gender,Partner,Dependents))],
                                hoverinfo='text')]

layout = go.Layout(title = 't-SNE Dimensionality Reduction', width = 700, height = 700, template= 'plotly_dark', 
                    xaxis = dict(title='First Dimension'),
                    yaxis = dict(title='Second Dimension'))
fig = go.Figure(data=data, layout=layout)
offline.plot(fig,filename='t-SNE1.html')

# Implementing UMAP to visualize Subset1
u1 = umap.UMAP(n_neighbors=30, min_dist=1, n_components=3)
x_umap1 = u1.fit_transform(X1)
x_umap1.shape


data = [go.Scatter(x=x_umap1[:,0], y=x_umap1[:,1], mode='markers',
                    marker = dict(color=kmeans.labels_, colorscale='rainbow', opacity=0.5),
                                text=[f'SeniorCitizen: {a}; gender: {b}; Partner:{c}, Dependents:{d}' for a,b,c,d in list(zip(SeniorCitizen,gender,Partner,Dependents))],
                                hoverinfo='text')]
layout = go.Layout(title = 'UMAP Dimensionality Reduction using k-label on customer-subset1', width = 700, height = 700,template='plotly_dark',
                    xaxis = dict(title='First Dimension'),
                    yaxis = dict(title='Second Dimension'))
fig = go.Figure(data=data, layout=layout)
offline.plot(fig,filename='subset1.html')

# Analysis on subset2 - Customer's subscription  details
# Finding the number of clusters (K) - Elbow Plot Method
inertia = []
for i in range(1,11):
    kmeans = KMeans(n_clusters = i, random_state = 100)
    kmeans.fit(X2)
    inertia.append(kmeans.inertia_)

plt.plot(range(1, 11), inertia)
plt.title('The Elbow Plot')
plt.xlabel('Number of clusters')
plt.ylabel('Inertia')
plt.show()

# Running KMeans to generate labels
kmeans = KMeans(n_clusters = 2)
kmeans.fit(X2)

# Implementing t-SNE to visualize dataset
tsne = TSNE(n_components = 2, perplexity =100,n_iter=5000)
x_tsne = tsne.fit_transform(X2)

PhoneService = list(dataset['PhoneService'])
MultipleLines = list(dataset['MultipleLines'])
DeviceProtection = list(dataset['DeviceProtection'])
TechSupport = list(dataset['TechSupport'])
Contract= list(dataset['Contract'])
data = [go.Scatter(x=x_tsne[:,0], y=x_tsne[:,1], mode='markers',
                    marker = dict(color=kmeans.labels_, colorscale='Rainbow', opacity=0.5),
                                text=[f'PhoneService: {a}; MultipleLines:{b}, DeviceProtection:{c}, TechSupport:{d},Contract:{e}' for a,b,c,d,e in list(zip(PhoneService,MultipleLines,DeviceProtection,TechSupport,Contract))],
                                hoverinfo='text')]

layout = go.Layout(title = 't-SNE Dimensionality Reduction', width = 1000, height = 700, template= 'plotly_dark', 
                    xaxis = dict(title='First Dimension'),
                    yaxis = dict(title='Second Dimension'))
fig = go.Figure(data=data, layout=layout)
offline.plot(fig,filename='t-SNE2.html')

# Implementing UMAP to visualize Subset2
u2 = umap.UMAP(n_neighbors=30, min_dist=1, n_components=2)
x_umap2 = u2.fit_transform(X2)
x_umap2.shape


data = [go.Scatter(x=x_umap2[:,0], y=x_umap2[:,1], mode='markers',
                    marker = dict(color=kmeans.labels_, colorscale='rainbow', opacity=0.5),
                                text=[f'PhoneService: {a}; MultipleLines:{b}, DeviceProtection:{c}, TechSupport:{d},Contract:{e}' for a,b,c,d,e in list(zip(PhoneService,MultipleLines,DeviceProtection,TechSupport,Contract))],
                                hoverinfo='text')]
layout = go.Layout(title = 'UMAP Dimensionality Reduction using k-label on customer-subset2', width = 700, height = 700,template='plotly_dark',
                    xaxis = dict(title='First Dimension'),
                    yaxis = dict(title='Second Dimension'))
fig = go.Figure(data=data, layout=layout)
offline.plot(fig,filename='subset2.html')

# Analysis on subset3 - Customer's billing details
# Finding the number of clusters (K) - Elbow Plot Method
inertia = []
for i in range(1,11):
    kmeans = KMeans(n_clusters = i, random_state = 100)
    kmeans.fit(X3)
    inertia.append(kmeans.inertia_)

plt.plot(range(1, 11), inertia)
plt.title('The Elbow Plot')
plt.xlabel('Number of clusters')
plt.ylabel('Inertia')
plt.show()

# Running KMeans to generate labels
kmeans = KMeans(n_clusters = 2)
kmeans.fit(X3)

# Implementing t-SNE to visualize dataset
tsne = TSNE(n_components = 2, perplexity =50,n_iter=2500)
x_tsne = tsne.fit_transform(X3)

PaperlessBilling = list(dataset['PaperlessBilling'])
PaymentMethod = list(dataset['PaymentMethod'])


data = [go.Scatter(x=x_tsne[:,0], y=x_tsne[:,1], mode='markers',
                    marker = dict(color=kmeans.labels_, colorscale='bluered', opacity=0.5),
                                text=[f'PaperlessBilling: {a}; PaymentMethod: {b}' for a,b in list(zip(PaperlessBilling,PaymentMethod))],
                                hoverinfo='text')]

layout = go.Layout(title = 't-SNE Dimensionality Reduction', width = 1000, height = 700, template='plotly_dark',
                    xaxis = dict(title='First Dimension'),
                    yaxis = dict(title='Second Dimension'))
fig = go.Figure(data=data, layout=layout)
offline.plot(fig,filename='t-SNE3.html')

# Implementing UMAP to visualize Subset3
u3 = umap.UMAP(n_neighbors=20, min_dist=0.1, n_components=2)
x_umap3 = u3.fit_transform(X3)
x_umap3.shape


data = [go.Scatter(x=x_umap3[:,0], y=x_umap3[:,1], mode='markers',
                    marker = dict(color=kmeans.labels_, colorscale='bluered', opacity=0.5),
                                text=[f'PaperlessBilling: {a}; PaymentMethod: {b}' for a,b in list(zip(PaperlessBilling,PaymentMethod))],
                                hoverinfo='text')]
layout = go.Layout(title = 'UMAP Dimensionality Reduction using k-label on customer-subset3', width = 700, height = 700,template='plotly_dark',
                    xaxis = dict(title='First Dimension'),
                    yaxis = dict(title='Second Dimension'))
fig = go.Figure(data=data, layout=layout)
offline.plot(fig,filename='subset3.html')

# Analysis on subset4 - Customer's internet service details
# Finding the number of clusters (K) - Elbow Plot Method
inertia = []
for i in range(1,11):
    kmeans = KMeans(n_clusters = i, random_state = 100)
    kmeans.fit(X2)
    inertia.append(kmeans.inertia_)

plt.plot(range(1, 11), inertia)
plt.title('The Elbow Plot')
plt.xlabel('Number of clusters')
plt.ylabel('Inertia')
plt.show()

# Running KMeans to generate labels
kmeans = KMeans(n_clusters = 3)
kmeans.fit(X2)

# Implementing t-SNE to visualize dataset
tsne = TSNE(n_components = 3, perplexity =100,n_iter=5000)
x_tsne = tsne.fit_transform(X2)

InternetService = list(dataset['InternetService'])
OnlineSecurity = list(dataset['OnlineSecurity'])
OnlineBackup = list(dataset['OnlineBackup'])
StreamingTV= list(dataset['StreamingTV'])
StreamingMovies= list(dataset['StreamingMovies'])
data = [go.Scatter(x=x_tsne[:,0], y=x_tsne[:,1], mode='markers',
                    marker = dict(color=kmeans.labels_, colorscale='spectral', opacity=0.5),
                                text=[f'InternetService: {a}; OnlineSecurity:{b}, OnlineBackup:{c}, StreamingTV:{d}, StreamingMovies:{e}' for a,b,c,d,e in list(zip(InternetService,OnlineSecurity,OnlineBackup,StreamingTV,StreamingMovies))],
                                hoverinfo='text')]

layout = go.Layout(title = 't-SNE Dimensionality Reduction', width = 1000, height = 700, template= 'plotly_dark', 
                    xaxis = dict(title='First Dimension'),
                    yaxis = dict(title='Second Dimension'))
fig = go.Figure(data=data, layout=layout)
offline.plot(fig,filename='t-SNE4.html')

# Implementing UMAP to visualize Subset4
u4 = umap.UMAP(n_neighbors=60, min_dist=1, n_components=3)
x_umap4 = u4.fit_transform(X4)
x_umap4.shape


data = [go.Scatter(x=x_umap4[:,0], y=x_umap4[:,1], mode='markers',
                    marker = dict(color=kmeans.labels_, colorscale='spectral', opacity=0.5),
                                text=[f'InternetService: {a}; OnlineSecurity:{b}, OnlineBackup:{c}, StreamingTV:{d}, StreamingMovies:{e}' for a,b,c,d,e in list(zip(InternetService,OnlineSecurity,OnlineBackup,StreamingTV,StreamingMovies))],
                                hoverinfo='text')]
layout = go.Layout(title = 'UMAP Dimensionality Reduction using k-label on customer-subset2', width = 700, height = 700,template='plotly_dark',
                    xaxis = dict(title='First Dimension'),
                    yaxis = dict(title='Second Dimension'))
fig = go.Figure(data=data, layout=layout)
offline.plot(fig,filename='subset4.html')

# Analysis on full data - Customer
# Finding the number of clusters (K) - Elbow Plot Method
inertia = []
for i in range(1,11):
    kmeans = KMeans(n_clusters = i, random_state = 100)
    kmeans.fit(final_data)
    inertia.append(kmeans.inertia_)

plt.plot(range(1, 11), inertia)
plt.title('The Elbow Plot')
plt.xlabel('Number of clusters')
plt.ylabel('Inertia')
plt.show()

# Running KMeans to generate labels
kmeans = KMeans(n_clusters = 3)
kmeans.fit(final_data)

##Applying Umap on full customers dataset

u = umap.UMAP(n_neighbors=15, min_dist=0.1, n_components=2)
x_umap = u.fit_transform(final_data)
x_umap.shape



data = [go.Scatter(x=x_umap[:,0], y=x_umap[:,1], mode='markers',
                    marker = dict(color=kmeans.labels_, colorscale='spectral', opacity=0.5),
                                text=[f'gender: {a}; Partner:{b}, Dependents:{c}' for a,b,c in list(zip(gender,Partner,Dependents))],
                                hoverinfo='text')]

layout = go.Layout(title = 'UMAP Dimensionality Reduction', width = 700, height = 700,template='plotly_dark',
                    xaxis = dict(title='First Dimension'),
                    yaxis = dict(title='Second Dimension'))
fig = go.Figure(data=data, layout=layout)
offline.plot(fig,filename='UmapAll.html')

##Applying Umap3d on full customers dataset

u = umap.UMAP(n_neighbors=15, min_dist=0.1, n_components=2)
x_umap = u.fit_transform(final_data)
x_umap.shape



data = [go.Scatter3d(x=x_umap[:,0], y=x_umap[:,1], z=x_umap[:,1], mode='markers',
                    marker = dict(color=kmeans.labels_, colorscale='spectral', opacity=0.5),
                                text=[f'gender: {a}; Partner:{b}, Dependents:{c}' for a,b,c in list(zip(gender,Partner,Dependents))],
                                hoverinfo='text')]

layout = go.Layout(title = 'UMAP Dimensionality Reduction', width = 700, height = 700,template='plotly_dark',
                    xaxis = dict(title='First Dimension'),
                    yaxis = dict(title='Second Dimension'))
fig = go.Figure(data=data, layout=layout)
offline.plot(fig,filename='UmapAll3d.html')